import argparse
import json
import logging
import os
from docx import Document



def _parse_arguments() -> argparse.Namespace:
    """Parse the command line arguments."""
    arg_parser = argparse.ArgumentParser(
        prog="create_review_document", description="Create a human readable report for expedited review."
    )
    arg_parser.add_argument(
        "--review_records_file",
        help="Observations requiring review",
        default="reports/records_to_review.json",
    )

    arg_parser.add_argument(
        "--output_file",
        help="Observations requiring review",
        default="reports/records_to_review.docx",
    )

    arg_parser.add_argument(
        "--verbose", action="store_true", help="increase verbosity"
    )
    return arg_parser.parse_args()


def main():
    """Main function for the app."""
    args = _parse_arguments()

    if args.verbose:
        logging.basicConfig(level=logging.INFO)

    with open(args.review_records_file, 'rt', encoding="utf-8") as file:
        observations = json.load(file)

    document = Document()


    document.add_heading('DRAFT Records for Expedited Review', 0)
    document.add_paragraph(
        style='List Bullet', text=f"Dates of observations: {observations['date of observations']}"
    )
    document.add_paragraph(
        style="List Bullet",
        text=f"State: {observations['state']}",
    )
    document.add_paragraph(
        style="List Bullet",
        text=f"Dates of report creation: {observations['date of report']}",
    )
    p = document.add_paragraph(
        style="List Bullet",
        text="Produced for and by VARCOM (Virginia Avian Records Committee), of the VSO (Virginia Society of Ornithology). ",
    )
    p.add_run(
        "https://www.virginiabirds.org/varcom"
    ).hyperlink = f"https://www.virginiabirds.org/varcom"
    p=document.add_paragraph(
        style="List Bullet",
        text="Automatically generated by VARCOM-get-reports. "
    )
    p.add_run(
        "https://github.com/gbabineau/VARCOM-get-reports"
    ).hyperlink = "https://github.com/gbabineau/VARCOM-get-reports"

    for county in observations['records']:
        document.add_heading(f"Reviewable records in {county['county']}", level=1)
        document.add_paragraph(f"Total records: {len (county['records'])}")
        county_records = county["records"]
        sorted_records = sorted(
            county_records,
            key=lambda x: (
                x["observation"]["comName"],
                x["observation"]["obsDt"],
            ),
        )

        current_species = ""
        for record in sorted_records:
            species = record["observation"]["comName"]
            if species != current_species:
                document.add_heading(species, level=2)
                if exclude := record['review_species'].get('exclude', []):
                    document.add_paragraph(
                        f"The species {record["observation"]["comName"]} is not excluded from review in {county['county']} because it is not in the following counties or groups of counties: {exclude}"
                    )
                if only := record["review_species"].get("only", []):
                    document.add_paragraph(
                        f"The species {record["observation"]["comName"]}: is only reviewed in the following counties or groups of counties:{only}"
                    )
                if unique_exclude_notes := record["review_species"].get(
                    "uniqueExcludeNotes", None
                ):
                    document.add_paragraph(f"This species has unique Exclude Notes which could not be automated. {unique_exclude_notes}")
                if not exclude and not only and not unique_exclude_notes:
                    document.add_paragraph(
                        f"The species {record["observation"]["comName"]} is reviewable across the entire state."
                    )
                if record.get("new", False):
                    document.add_paragraph(
                        f"The species {record["observation"]["comName"]} is not in the state list. A new record?"
                    )
                current_species = species
            if record["observation"].get("subId"):
                p = document.add_paragraph(style='List Bullet')
                p.add_run(
                    f"https://ebird.org/checklist/{record['observation']['subId']}"
                ).hyperlink = f"https://ebird.org/checklist/{record['observation']['subId']}"

    if os.path.exists(args.output_file):
        os.remove(args.output_file)
    document.save(args.output_file)

if __name__ == "__main__":
    main()